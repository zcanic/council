“议会回环”建造圣经 V2.0 (MySQL版)
第一部分：技术文档 (The Technical Grimoire)
这是我们项目的“魔法书”，它详细记载了我们世界的构成法则与运作机理。你的AI Agent将严格依据此书来施展它的“代码魔法”。
1. 核心架构 (Core Architecture)
* 模型: 全栈一体化 (Full-stack Monolith)
* 框架: Next.js (App Router)
* 语言: TypeScript
* 哲学: 我们将采用极度精简的单体架构。所有前端渲染、API逻辑、后端服务都将统一在Next.js项目内完成。这种模式能最大限度地减少配置和联调的复杂度，是四周冲刺的最佳选择。
2. 数据模型 (Prisma Schema for MySQL)
* 这是我们世界的“骨架”。我们将使用Prisma作为ORM来操作一个稳定强大的MySQL数据库。
// file: prisma/schema.prisma

generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "mysql"
 url      = env("DATABASE_URL") // 连接字符串将从环境变量中读取
}

// 议题（智慧之树的根）
model Topic {
 id        String     @id @default(cuid())
 title     String     @db.VarChar(255) // 为MySQL指定类型
 createdAt DateTime   @default(now())
 comments  Comment[]
 summaries Summary[]
}

// 评论（树叶）
model Comment {
 id        String    @id @default(cuid())
 content   String    @db.Text // 使用Text类型以支持长评论
 author    String?   @db.VarChar(255)
 createdAt DateTime  @default(now())

 // 一个评论要么属于一个Topic，要么属于一个Summary
 topicId   String?
 topic     Topic?    @relation(fields: [topicId], references: [id])
 summaryId String?
 summary   Summary?  @relation(fields: [summaryId], references: [id])
}

// 总结（树枝，也是新的生长点）
model Summary {
 id        String    @id @default(cuid())
 content   String    @db.Text
 createdAt DateTime  @default(now())

 // 一个总结要么属于一个Topic，要么属于另一个Summary（形成树状结构）
 topicId   String?
 topic     Topic?    @relation(fields: [topicId], references: [id])
 parentId  String?
 parent    Summary?  @relation("SummaryToSummary", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
 
 children  Summary[] @relation("SummaryToSummary")
 comments  Comment[]
}

zcanic的小提示喵: 我们需要在项目根目录下创建一个 .env 文件，来存放我们的数据库连接字符串，例如: DATABASE_URL="mysql://user:password@localhost:3306/parliament_loop"
3. API 接口 (Next.js API Routes)
* 这是我们世界与外界沟通的“传送门”。(此部分逻辑与数据库类型无关，保持不变)
* POST /api/topics
   * 功能: 创建一个新的根议题 (Topic)。
   * 请求体: { "title": "string" }
   * 返回值: 创建成功的Topic对象。
* GET /api/topics/[id]
   * 功能: 获取一个完整的“智慧之树”。
   * 返回值: 一个包含了指定Topic及其所有子评论(comments)和子总结(summaries)的嵌套JSON对象。
* POST /api/comments
   * 功能: 提交一条新的评论，并处理核心的“智慧提纯”逻辑。
   * 请求体: { "content": "string", "author": "string" (optional), "parentId": "string", "parentType": "topic" | "summary" }
   * 核心逻辑:
      1. 接收并保存新评论。
      2. 检查其父节点（Topic或Summary）下的评论数量。
      3. 如果数量 < 9: 正常返回。
      4. 如果数量 == 9 (即当前是第10条):
         * 锁定当前回环（可在父节点上加一个状态字段）。
         * 同步执行AI提纯逻辑（竞赛MVP，允许用户等待）。
         * 将父节点下的10条评论打包，发送给LLM。
         * 接收LLM的总结，创建一个新的Summary记录，并与父节点关联。
         * 返回成功信息，前端收到后应自动刷新，展示出新的Summary卡片和空的回环。
4. AI 书记官 Prompt (核心咒语)
* 这是我们系统的“灵魂”，需要反复调试。(保持不变)
你是一个绝对中立、逻辑严谨、精通信息提纯的“书记官”。你的任务是阅读以下10条关于同一个议题的评论，然后以JSON格式，总结出其中的核心信息。

你的输出必须严格遵守以下JSON结构，不要添加任何额外的解释性文字：
{
 "consensus": "总结这10条评论中，大部分人都同意或反复提及的核心共识。如果没有明确共识，请客观描述现状。",
 "disagreements": [
   {
     "point": "描述第一个主要的分歧点。",
     "views": ["总结支持该分歧点的不同观点A", "总结反对或另一种观点B"]
   }
 ],
 "new_questions": [
   "总结讨论中被提出的、有价值的、可供下一轮讨论的新问题1",
   "总结讨论中被提出的、有价值的、可供下一轮讨论的新问题2"
 ]
}

以下是10条评论内容：
[此处将10条评论的文本拼接插入]

第二部分：构建路线图 (The Construction Roadmap)
这是我们为期四周的“创世”工期表，每一步都清晰明确，确保我们能在最终审判日（竞赛日）前，完成我们的奇迹。
第一周 (Week 1): 地基与骨架 —— “让世界运转起来”
* 目标: 搭建一个功能可用，但界面简陋的“毛坯房”。
* 任务清单:
   1. 项目初始化: 创建Next.js项目，集成TypeScript, Tailwind CSS, Prisma。
   2. 数据库搭建: (已修改) 配置MySQL数据库（建议使用Docker Compose进行本地环境搭建），编写并迁移schema.prisma，确保Next.js应用能成功连接到数据库。
   3. 核心API开发: 完成POST /api/topics和POST /api/comments的基础逻辑（暂时不接AI，第10条评论提交后，只锁定回环即可）。
   4. 基础前端组件: 让你的AI Agent生成最基础的、没有动画的TopicSpace, CommentCard等React组件。
* 周一成果: 一个可以创建议题、可以发表10条评论、然后回环会被锁定的、最基础的Web应用。
第二周 (Week 2): 注入灵魂 —— “智慧提纯的魔法”
* 目标: 实现项目的核心魔法——AI总结。
* 任务清单:
   1. AI集成: 在项目中集成OpenAI或Anthropic的官方SDK。
   2. Prompt调试: (本周核心！) 花费大量时间，反复测试和优化我们的“书记官Prompt”，确保它能稳定输出高质量的总结。
   3. API升级: 在POST /api/comments接口中，正式加入调用LLM并创建Summary记录的逻辑。
   4. 前端展示: 创建SummaryCard组件，并在前端实现“智慧之树”的递归渲染，让新的总结和回环能正确显示。
* 周二成果: 核心功能闭环！一个讨论可以被AI总结，并开启新的讨论，智慧之树可以开始生长了！
第三周 (Week 3): 雕琢圣殿 —— “视觉与体验的革命”
* 目标: 将“毛坯房”精装修成一座令人惊叹的“思想大教堂”。
* 任务清单:
   1. Lobby开发: 让AI Agent使用Framer Motion，根据你的Figma设计，构建那个充满动感的“思想节点”Lobby。
   2. 交互升级: 实现议题空间内“卡牌式”的翻阅交互。
   3. 灵魂动画: (本周核心！) 投入全部精力，让你和你的AI Agent一起，用Framer Motion实现那个最华丽、最核心的“智慧提纯”过渡动画！
   4. UI全面美化: 根据Figma设计稿，打磨所有组件的样式、间距、字体，让产品达到竞赛级的视觉标准。
* 周三成果: 项目的“Wow Factor”完成！它现在不仅功能强大，而且看起来和用起来都像一件艺术品。
第四周 (Week 4): 最终试炼 —— “加固、部署与演练”
* 目标: 确保我们的“大教堂”稳固可靠，并准备好接受所有人的朝圣。
* 任务清单:
   1. 全面测试与修复: 进行疯狂的Bug修复，确保所有功能在竞赛演示时万无一失。
   2. 打包与部署: (已修改) 编写docker-compose.yml文件，用于同时管理Next.js应用容器和MySQL数据库容器的构建与部署。在你的服务器上成功部署并进行最终测试。
   3. 数据填充: 预先创建几个有趣的、已经经过几轮提纯的议题，让Demo看起来内容丰富。
   4. 演练！演练！再演练！: 准备好你的竞赛演示文稿，反复练习你要如何向评委展示这个项目的每一个亮点。
* 周四成果: 一个稳定、部署完成、随时可以惊艳全场的、完美的竞赛作品！